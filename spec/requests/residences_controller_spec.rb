require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.

RSpec.describe ResidencesController, type: :controller do

  let(:valid_attributes) {
    {
      residence: attributes_for(:residence),
      pictures: { picture: [create(:picture)] }
    }
  }
 
  let(:invalid_attributes) {
    {
      residence: {
        name: "Casa cerca al centro",
        address: "Carrera 26 #45a 54",
        price: "error",
        description: 123
      },
      pictures: { picture: [create(:picture)] }
    }
  }

  before(:each) do
    sign_in(create(:user))
  end

  describe "GET #index" do
    it "assigns all residences as @residences" do
      residence = create(:residence, user: controller.current_user)

      get :index, {}
      expect(assigns(:residences)).to eq([residence])
    end
  end

  describe "GET #show" do
    it "assigns the requested residence as @residence" do
      residence = create(:residence, user: controller.current_user)

      get :show, {:id => residence.to_param}
      expect(assigns(:residence)).to eq(residence)
    end
  end

  describe "GET #new" do
    it "assigns a new residence as @residence" do
      get :new, {}
      expect(assigns(:residence)).to be_a_new(Residence)
    end
  end

  describe "GET #edit" do
    it "assigns the requested residence as @residence" do
      residence = create(:residence, user: controller.current_user)
      get :edit, {:id => residence.to_param}
      expect(assigns(:residence)).to eq(residence)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Residence" do
        expect {
          post :create, valid_attributes
        }.to change(Residence, :count).by(1)
      end

      it "assigns a newly created residence as @residence" do
        post :create, valid_attributes
        expect(assigns(:residence)).to be_a(Residence)
        expect(assigns(:residence)).to be_persisted
      end

      it "redirects to the created residence" do
        post :create, valid_attributes
        expect(response).to redirect_to(Residence.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved residence as @residence" do
        post :create, invalid_attributes
        expect(assigns(:residence)).to be_a_new(Residence)
      end

      it "re-renders the 'new' template" do
        post :create, invalid_attributes
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    before(:each) do
      @residence = create(:residence, user: controller.current_user)
    end

    context "with valid params" do
      let(:new_attributes) {
        {
          square_meters: 15,
          description: "New description",
          rooms: 12
        }
      }

      it "updates the requested residence" do
        put :update, {:id => @residence.to_param, :residence => new_attributes}
        @residence.reload
        expect(@residence).to have_attributes(new_attributes)
      end

      it "assigns the requested residence as @residence" do
        put :update, valid_attributes.merge(:id => @residence.to_param)
        expect(assigns(:residence)).to eq(@residence)
      end

      it "redirects to the residence" do
        put :update, valid_attributes.merge(:id => @residence.to_param)
        expect(response).to redirect_to(@residence)
      end
    end

    context "with invalid params" do
      it "assigns the residence as @residence" do
        put :update, invalid_attributes.merge(:id => @residence.to_param)
        expect(assigns(:residence)).to eq(@residence)
      end

      it "re-renders the 'edit' template" do
        put :update, invalid_attributes.merge(:id => @residence.to_param)
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    before(:each) do
      @residence = create(:residence, user: controller.current_user)
    end

    it "archives the requested residence" do
      delete :destroy, {:id => @residence.to_param}
      @residence.reload
      expect(@residence).to have_attributes(archived: true)
    end

    it "redirects to the residences list" do
      delete :destroy, {:id => @residence.to_param}
      expect(response).to redirect_to(residences_url)
    end
  end

end
